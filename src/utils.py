from enum import Enum


class Roles(Enum):
    admin = "0x5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca5"
    executor = "0xd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63"
    proposer = "0xb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc1"


async def extract_argument(event: dict, argument: str) -> any:
    """
    the function extract specified argument from the event
    :param event: dict
    :param argument: str
    :return: argument value
    """
    return event.get('args', {}).get(argument, "")


async def check_new_min_delay_is_zero(event: dict) -> bool:
    """
    the function returns true if the event has newDuration argument and it is equal to zero
    :param event: dict
    :return: bool
    """
    return await extract_argument(event, "newDuration") == 0


async def bytes32_to_str(bytes32: bytes) -> str:
    """
    the function converts bytes32 to human-readable form
    :param bytes32:
    :return: string
    """
    bytes32 = bytes32.hex().rstrip("0")
    if len(bytes32) % 2 != 0:
        bytes32 = bytes32 + '0'
    string = bytes.fromhex(bytes32).decode('utf8')
    return string
