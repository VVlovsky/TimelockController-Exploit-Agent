from forta_agent import Finding, FindingType, FindingSeverity


class TimelockFindings:
    @staticmethod
    async def zero_delay_finding(contract: str, from_: str, tx_hash: str, old_delay: int) -> Finding:
        return Finding({
            'name': 'TimelockController Minimum Delay Was Set To Zero',
            'description': f'{from_} set TimelockController Minimum Delay to zero',
            'alert_id': 'TIMELOCK-ZERO-DELAY',
            'type': FindingType.Suspicious,
            'severity': FindingSeverity.Info,
            'metadata': {
                'contract': contract,
                'tx_hash': tx_hash,
                'old_delay': old_delay
            }
        })

    @staticmethod
    async def main_exploit_finding(from_: str, contract: str, tx_hash: str, proposal_id: str) -> Finding:
        return Finding({
            'name': 'TimelockController Exploit Alert',
            'description': f'{from_} exploit TimelockController {contract}',
            'alert_id': 'TIMELOCK-EXPLOIT',
            'type': FindingType.Exploit,
            'severity': FindingSeverity.Critical,
            'metadata': {
                'contract': contract,
                'tx_hash': tx_hash,
                'executor': from_,
                'proposal_id': proposal_id
            }
        })

    @staticmethod
    async def proposal_lifecycle_violation_finding(from_: str, contract: str, hash: str, proposal_id: str) -> Finding:
        return Finding({
            'name': 'TimelockController Proposal Lifecycle Violation',
            'description': f'Proposal {proposal_id} for contact {contract} was executed before scheduled',
            'alert_id': 'TIMELOCK-PROPOSAL-LIFECYCLE-VIOLATION',
            'type': FindingType.Suspicious,
            'severity': FindingSeverity.Critical,
            'metadata': {
                'contract': contract,
                'tx_hash': hash,
                'executor': from_,
                'proposal_id': proposal_id
            }
        })

    @staticmethod
    async def executor_got_proposer_role_finding(account: str, from_: str, contract: str, tx_hash: str) -> Finding:
        return Finding({
            'name': 'TimelockController Executor Got Proposer Role',
            'description': f'TimelockController {contract} executor {account} got proposer role',
            'alert_id': 'TIMELOCK-EXECUTOR-PROPOSER',
            'type': FindingType.Suspicious,
            'severity': FindingSeverity.Medium,
            'metadata': {
                'contract': contract,
                'tx_hash': tx_hash,
                'executor': account,
                'initiator': from_
            }
        })

    @staticmethod
    async def executor_got_admin_role_finding(account: str, from_: str, contract: str, tx_hash: str) -> Finding:
        return Finding({
            'name': 'TimelockController Executor Got Admin Role',
            'description': f'TimelockController {contract} executor {account} got admin role',
            'alert_id': 'TIMELOCK-EXECUTOR-ADMIN',
            'type': FindingType.Suspicious,
            'severity': FindingSeverity.Critical,
            'metadata': {
                'contract': contract,
                'tx_hash': tx_hash,
                'executor': account,
                'initiator': from_
            }
        })

    @staticmethod
    async def untrusted_executor_finding(contract: str, from_: str) -> Finding:
        return Finding({
            'name': 'TimelockController Untrusted Executor',
            'description': f'TimelockController executor {from_} is untrusted!',
            'alert_id': 'TIMELOCK-UNTRUSTED-EXECUTOR',
            'type': FindingType.Suspicious,
            'severity': FindingSeverity.High,
            'metadata': {
                'contract': contract,
                'executor': from_,
            }
        })

    @staticmethod
    async def contract_lost_selfadministration_finding(sender: str, contract: str, tx_hash: str) -> Finding:
        return Finding({
            'name': 'Contract Lost Its Admin Role',
            'description': f'Contract`s {contract} role "ADMIN" was revoked',
            'alert_id': 'TIMELOCK-ADMIN-REVOKED',
            'type': FindingType.Suspicious,
            'severity': FindingSeverity.High,
            'metadata': {
                'contract': contract,
                'tx_hash': tx_hash,
                'from': sender,
            }
        })

    @staticmethod
    async def role_renounced_finding(sender: str, tx_hash: str, role: str, contract: str) -> Finding:
        return Finding({
            'name': 'Address Renounced Its Role',
            'description': f'Address {sender} renounced its own role {role}',
            'alert_id': 'TIMELOCK-ROLE-RENOUNCED',
            'type': FindingType.Info,
            'severity': FindingSeverity.Medium,
            'metadata': {
                'contract': contract,
                'tx_hash': tx_hash,
                'from': sender,
                'role': role
            }
        })

    @staticmethod
    async def role_revoked_finding(sender: str, account: str, tx_hash: str, role: str, contract: str) -> Finding:
        return Finding({
            'name': 'Role Revoked Event',
            'description': f'Address {sender} revoked role {role} of the address {account}',
            'alert_id': 'TIMELOCK-ROLE-REVOKED',
            'type': FindingType.Info,
            'severity': FindingSeverity.Medium,
            'metadata': {
                'contract': contract,
                'tx_hash': tx_hash,
                'from': sender,
                'role': role,
                'account': account
            }
        })
